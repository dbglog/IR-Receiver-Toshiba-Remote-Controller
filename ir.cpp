#include "pxt.h"
#include <map>
#include <vector>
#include "ReceiverIR.h"
using namespace pxt;
typedef vector<Action> vA;

enum class Pins
{
  P0 = 3,
  P1 = 2,
  P2 = 1,
  P3 = 4,
  P4 = 5,
  P5 = 17,
  P6 = 12,
  P7 = 11,
  P8 = 18,
  P9 = 10,
  P10 = 6,
  P11 = 26,
  P12 = 20,
  P13 = 23,
  P14 = 22,
  P15 = 21,
  P16 = 16,
  P19 = 0,
  P20 = 30
};

enum class RemoteButton
{
  //Toshiba TV Remote controler
  //Code define 0x00ï½ž0xFF
  B00=0x00,
  B01=0x01,
  B02=0x02,
  B03=0x03,
  B04=0x04,
  B05=0x05,
  B06=0x06,
  B07=0x07,
  B08=0x08,
  B09=0x09,
  B0A=0x0A,
  B0B=0x0B,
  B0C=0x0C,
  B0D=0x0D,
  B0E=0x0E,
  B0F=0x0F,
  B10=0x10,
  B11=0x11,
  B12=0x12,
  B13=0x13,
  B14=0x14,
  B15=0x15,
  B16=0x16,
  B17=0x17,
  B18=0x18,
  B19=0x19,
  B1A=0x1A,
  B1B=0x1B,
  B1C=0x1C,
  B1D=0x1D,
  B1E=0x1E,
  B1F=0x1F,
  B20=0x20,
  B21=0x21,
  B22=0x22,
  B23=0x23,
  B24=0x24,
  B25=0x25,
  B26=0x26,
  B27=0x27,
  B28=0x28,
  B29=0x29,
  B2A=0x2A,
  B2B=0x2B,
  B2C=0x2C,
  B2D=0x2D,
  B2E=0x2E,
  B2F=0x2F,
  B30=0x30,
  B31=0x31,
  B32=0x32,
  B33=0x33,
  B34=0x34,
  B35=0x35,
  B36=0x36,
  B37=0x37,
  B38=0x38,
  B39=0x39,
  B3A=0x3A,
  B3B=0x3B,
  B3C=0x3C,
  B3D=0x3D,
  B3E=0x3E,
  B3F=0x3F,
  B40=0x40,
  B41=0x41,
  B42=0x42,
  B43=0x43,
  B44=0x44,
  B45=0x45,
  B46=0x46,
  B47=0x47,
  B48=0x48,
  B49=0x49,
  B4A=0x4A,
  B4B=0x4B,
  B4C=0x4C,
  B4D=0x4D,
  B4E=0x4E,
  B4F=0x4F,
  B50=0x50,
  B51=0x51,
  B52=0x52,
  B53=0x53,
  B54=0x54,
  B55=0x55,
  B56=0x56,
  B57=0x57,
  B58=0x58,
  B59=0x59,
  B5A=0x5A,
  B5B=0x5B,
  B5C=0x5C,
  B5D=0x5D,
  B5E=0x5E,
  B5F=0x5F,
  B60=0x60,
  B61=0x61,
  B62=0x62,
  B63=0x63,
  B64=0x64,
  B65=0x65,
  B66=0x66,
  B67=0x67,
  B68=0x68,
  B69=0x69,
  B6A=0x6A,
  B6B=0x6B,
  B6C=0x6C,
  B6D=0x6D,
  B6E=0x6E,
  B6F=0x6F,
  B70=0x70,
  B71=0x71,
  B72=0x72,
  B73=0x73,
  B74=0x74,
  B75=0x75,
  B76=0x76,
  B77=0x77,
  B78=0x78,
  B79=0x79,
  B7A=0x7A,
  B7B=0x7B,
  B7C=0x7C,
  B7D=0x7D,
  B7E=0x7E,
  B7F=0x7F,
  B80=0x80,
  B81=0x81,
  B82=0x82,
  B83=0x83,
  B84=0x84,
  B85=0x85,
  B86=0x86,
  B87=0x87,
  B88=0x88,
  B89=0x89,
  B8A=0x8A,
  B8B=0x8B,
  B8C=0x8C,
  B8D=0x8D,
  B8E=0x8E,
  B8F=0x8F,
  B90=0x90,
  B91=0x91,
  B92=0x92,
  B93=0x93,
  B94=0x94,
  B95=0x95,
  B96=0x96,
  B97=0x97,
  B98=0x98,
  B99=0x99,
  B9A=0x9A,
  B9B=0x9B,
  B9C=0x9C,
  B9D=0x9D,
  B9E=0x9E,
  B9F=0x9F,
  BA0=0xA0,
  BA1=0xA1,
  BA2=0xA2,
  BA3=0xA3,
  BA4=0xA4,
  BA5=0xA5,
  BA6=0xA6,
  BA7=0xA7,
  BA8=0xA8,
  BA9=0xA9,
  BAA=0xAA,
  BAB=0xAB,
  BAC=0xAC,
  BAD=0xAD,
  BAE=0xAE,
  BAF=0xAF,
  BB0=0xB0,
  BB1=0xB1,
  BB2=0xB2,
  BB3=0xB3,
  BB4=0xB4,
  BB5=0xB5,
  BB6=0xB6,
  BB7=0xB7,
  BB8=0xB8,
  BB9=0xB9,
  BBA=0xBA,
  BBB=0xBB,
  BBC=0xBC,
  BBD=0xBD,
  BBE=0xBE,
  BBF=0xBF,
  BC0=0xC0,
  BC1=0xC1,
  BC2=0xC2,
  BC3=0xC3,
  BC4=0xC4,
  BC5=0xC5,
  BC6=0xC6,
  BC7=0xC7,
  BC8=0xC8,
  BC9=0xC9,
  BCA=0xCA,
  BCB=0xCB,
  BCC=0xCC,
  BCD=0xCD,
  BCE=0xCE,
  BCF=0xCF,
  BD0=0xD0,
  BD1=0xD1,
  BD2=0xD2,
  BD3=0xD3,
  BD4=0xD4,
  BD5=0xD5,
  BD6=0xD6,
  BD7=0xD7,
  BD8=0xD8,
  BD9=0xD9,
  BDA=0xDA,
  BDB=0xDB,
  BDC=0xDC,
  BDD=0xDD,
  BDE=0xDE,
  BDF=0xDF,
  BE0=0xE0,
  BE1=0xE1,
  BE2=0xE2,
  BE3=0xE3,
  BE4=0xE4,
  BE5=0xE5,
  BE6=0xE6,
  BE7=0xE7,
  BE8=0xE8,
  BE9=0xE9,
  BEA=0xEA,
  BEB=0xEB,
  BEC=0xEC,
  BED=0xED,
  BEE=0xEE,
  BEF=0xEF,
  BF0=0xF0,
  BF1=0xF1,
  BF2=0xF2,
  BF3=0xF3,
  BF4=0xF4,
  BF5=0xF5,
  BF6=0xF6,
  BF7=0xF7,
  BF8=0xF8,
  BF9=0xF9,
  BFA=0xFA,
  BFB=0xFB,
  BFC=0xFC,
  BFD=0xFD,
  BFE=0xFE,
  BFF=0xFF,
};

//% color=50 weight=80
//% icon="\uf1eb"
namespace IR
{
map<RemoteButton, vA> actions;
map<RemoteButton, uint32_t> lastact;
Timer tsb;
uint8_t buf[32];
uint32_t now;
ReceiverIR *rx;
RemoteIR::Format fmt = RemoteIR::UNKNOWN;

void cA(vA runner)
{
  for (int i = 0; i < runner.size(); i++)
  {
    runAction0(runner[i]);
  }
}

void onReceivable()
{
  int x = rx->getData(&fmt, buf, 32 * 8);
  if (actions.find((RemoteButton)buf[2]) == actions.end())
    return;
  now = tsb.read_ms();
  if (now - lastact[(RemoteButton)buf[2]] < 100)
    return;
  lastact[(RemoteButton)buf[2]] = now;
  cA(actions[(RemoteButton)buf[2]]);
}

void monitorIR()
{
  while (1)
  {
    while (rx->getState() != ReceiverIR::Received)
    {
      uBit.sleep(50);
    }
    onReceivable();
  }
}

//%
void init(Pins pin)
{
  rx = new ReceiverIR((PinName)pin);
  tsb.start(); //interrupt timer for debounce
  create_fiber(monitorIR);
}

//%
void onPressEvent(RemoteButton btn, Action body)
{
  //if(actions.find(btn) == actions.end()) actions[btn] = new vector();
  actions[btn].push_back(body);
}
} // namespace IR
